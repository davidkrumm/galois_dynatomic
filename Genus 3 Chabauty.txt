# Computes the Strassman bound for the given power series.
def strassman_bound(F):
	n = F.precision_absolute() - 1
	valuations = [F[i].valuation() for i in range(n + 1)]
	v = min(valuations)
	if RR(n) - RR(log(n,p)) >= v:
		return n - valuations[::-1].index(v)
	return None

# Lifts a given point in C(Fp) to C(Qp).
def lift(point):
	a, b, c = point
	if c == 0:
		return Cp(0,1,0)
	elif b != 0:
		# Lift b to a square root of f(a)
		a_lift = a.lift()
		n = Qp(f(a_lift))
		v = None
		s = b.lift()
		while v != s:
			v = s
			s = (v + n/v)/2
		return Cp(a_lift,s)
	else:
		# Lift a to a root of f
		v = None
		r = Qp(a.lift())
		while v != r:
			v = r
			r = v - f(v)/f.derivative()(v)
		return Cp(r,0)
	
# Expresses x and y as power series at the given point.	
def power_series_at(pt):
	a, b, c = pt
	if c != 0:
		return Cp.local_coord(pt, 10)
	else:
		h = parent(f)(x^(2*g+2)*f(1/x))
		Xp = HyperellipticCurve(h).change_ring(Qp)
		u, v = Xp.local_coord(Xp(0,0), 10)
		t = parent(u).gen()
		return (1/u, t/u^(g+1))

_.<x> = QQ[]
f = (x^3 + 4)*(x^4 + 8*x^3 + 16*x^2 + 64)
C = HyperellipticCurve(f)
g = C.genus()

p = 11
Qp = pAdicField(p,10)
Cp = C.change_ring(Qp)
Cp_red = Cp.change_ring(GF(p))

a, b, c = Cp.coleman_integrals_on_basis(Cp(0,1,0), Cp(0,16))[0:g]

# Construct a basis for the annihilator of J(Q).
omega0 = Cp.invariant_differential()
xmw = Cp.monsky_washnitzer_gens()[0]
omega1 = xmw*omega0
omega2 = xmw^2*omega0
alpha = (b*omega0 - a*omega1)/11
beta = (-c*omega1 + b*omega2)/11

_.<z> = Qp[]
alphapoly = (b - a*z)/11
betapoly = (-c*z + b*z^2)/11

# Bounds the number of rational points in the given residue disk.
def bound_for_disk(basepoint, coeffs, reduction_point):
	Q = lift(reduction_point)
	xt, yt = power_series_at(Q)
	t = parent(xt).gen()
	eta = coeffs[0]*alpha + coeffs[1]*beta
	etapoly = coeffs[0]*alphapoly + coeffs[1]*betapoly
	w = etapoly(xt)*xt.derivative()/(2*yt)
	F = eta.integrate(basepoint, Q) + w.integral()(p*t)
	return strassman_bound(F)

# Print the data needed to fill in Table 2 in the paper.	
for pt in Cp_red.rational_points():
	print "Residue disk over", pt
	for u, v in [(1,0),(0,1),(4,1),(7,1)]:
		print "-- bound using", (u,v), ":", bound_for_disk(Cp(0,1,0), (u,v), pt)

# Print out all the relevant data for one example.
Q = lift(Cp_red(1,4))
print Q
xt, yt = power_series_at(Q)
t = parent(xt).gen()
print xt
print yt
eta = 7*alpha + beta
etapoly = 7*alphapoly + betapoly
w = etapoly(xt)*xt.derivative()/(2*yt)
print w
F = eta.integrate(Cp(0,1,0), Q) + w.integral()(p*t)
print F
strassman_bound(F)
